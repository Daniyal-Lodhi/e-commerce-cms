generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String       @id @default(uuid())
  name        String
  userId      String
  frontendUrl String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  billboards  Billboards[] @relation("StoreToBillboards")
  categories  Categories[] @relation("StoreToCategories")
  products    Product[]    @relation("StoreToProducts")
  orders      Order[]      @relation("StoreToOrders")

  sizes Size[]  @relation("StoreToSizes")
  color Color[] @relation("StoreToColor")
}

model Billboards {
  id         String       @id @default(uuid())
  storeId    String
  store      Store        @relation("StoreToBillboards", fields: [storeId], references: [id])
  label      String
  featured   Boolean      @default(false)
  imageUrl   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  categories Categories[] @relation("BillboardToCategories")

  @@index([storeId])
}

model Categories {
  id          String     @id @default(uuid())
  storeId     String
  store       Store      @relation("StoreToCategories", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboards @relation("BillboardToCategories", fields: [billboardId], references: [id])
  product     Product[]  @relation("CategoryToProducts")

  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  value     String
  name      String
  storeId   String
  store     Store     @relation("StoreToSizes", fields: [storeId], references: [id])
  product   Product[] @relation("SizeToProducts")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@index([storeId])
}

model Color {
  id      String    @id @default(uuid())
  name    String
  value   String
  storeId String
  store   Store     @relation("StoreToColor", fields: [storeId], references: [id])
  product Product[] @relation("ColorToProducts")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([storeId])
}

model Product {
  id          String       @id @default(uuid())
  name        String
  description String? @db.Text
  price       Decimal
  quantity    Decimal
  storeId     String
  store       Store        @relation("StoreToProducts", fields: [storeId], references: [id])
  sizeId      String
  size        Size         @relation("SizeToProducts", fields: [sizeId], references: [id])
  categoryId  String
  category    Categories   @relation("CategoryToProducts", fields: [categoryId], references: [id])
  colorId     String
  color       Color        @relation("ColorToProducts", fields: [colorId], references: [id])
  images      Image[]
  orderItems  OrderItems[] @relation("ProductToOrderItems")
  favourite   Favourite[]  @relation("ProductToFavourites")
  ratings     Rating[]     @relation("ProductToRatings")
  isArchived  Boolean      @default(false)
  isFeatured  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())

  @@index([storeId])
  @@index([categoryId])
  @@index([colorId])
  @@index([sizeId])
}

model Image {
  id        String   @id @default(uuid())
  imageUrl  String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([productId])
}

enum paymentType {
  COD
  CARD
}

model Order {
  id          String       @id @default(uuid())
  storeId     String
  store       Store        @relation("StoreToOrders", fields: [storeId], references: [id])
  userId      String
  paymentType paymentType
  phoneNumber String?
  address     String?
  orderItems  OrderItems[] @relation("OrderToOrderItems")
  rating      Rating[]     @relation("OrderToRatings")
  isPaid      Boolean
  completed   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  completedAt DateTime?

  @@index([storeId])
}

model OrderItems {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation("OrderToOrderItems", fields: [orderId], references: [id])
  productId String
  product   Product @relation("ProductToOrderItems", fields: [productId], references: [id])
  isRated   Boolean @default(false)

  @@unique([orderId, productId])
  @@index([orderId])
  @@index([productId])
}

model Favourite {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation("ProductToFavourites", fields: [productId], references: [id])
  userId    String
  liked     Boolean @default(false)

  @@unique([userId, productId])
  @@index([productId, userId])
}

model Rating {
  id        String  @id @default(uuid())
  username  String
  productId String
  orderId   String
  order     Order   @relation("OrderToRatings", fields: [orderId], references: [id])
  product   Product @relation("ProductToRatings", fields: [productId], references: [id])
  userId    String
  stars     Decimal
  comment   String?
  

  @@unique([orderId, productId])
  @@index([productId])
}
